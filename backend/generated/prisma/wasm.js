
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  usersecret: 'usersecret',
  authority: 'authority'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  patientName: 'patientName',
  residentialId: 'residentialId',
  age: 'age',
  birthDate: 'birthDate',
  phoneNumber: 'phoneNumber',
  address: 'address',
  bloodType: 'bloodType',
  hight: 'hight',
  weight: 'weight',
  social: 'social',
  gender: 'gender',
  sicknessCause: 'sicknessCause',
  firstEverTreatment: 'firstEverTreatment',
  firstTreatmentHere: 'firstTreatmentHere',
  note: 'note',
  filterNo: 'filterNo',
  schedule: 'schedule'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  originalName: 'originalName',
  storedName: 'storedName',
  size: 'size',
  mimeType: 'mimeType',
  path: 'path',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  date: 'date',
  day: 'day',
  techName: 'techName',
  deviceNo: 'deviceNo',
  sessionType: 'sessionType',
  sessionDuration: 'sessionDuration',
  startingTime: 'startingTime',
  anticoagulantUsed: 'anticoagulantUsed',
  ktv: 'ktv',
  urr: 'urr',
  ultrafiltrationRate: 'ultrafiltrationRate',
  wtPreHD: 'wtPreHD',
  wtPostHD: 'wtPostHD',
  HDStarting: 'HDStarting',
  heparinRate: 'heparinRate',
  heparinBolus: 'heparinBolus',
  UFGoal: 'UFGoal',
  intake: 'intake',
  output: 'output',
  balance: 'balance',
  patientId: 'patientId'
};

exports.Prisma.SessionHoursScalarFieldEnum = {
  id: 'id',
  time: 'time',
  bloodPressure: 'bloodPressure',
  systolicBP: 'systolicBP',
  diastolicBP: 'diastolicBP',
  rbs: 'rbs',
  ivf: 'ivf',
  drugs: 'drugs',
  cramps: 'cramps',
  vomitting: 'vomitting',
  hematoma: 'hematoma',
  chestPain: 'chestPain',
  pulseRate: 'pulseRate',
  temperature: 'temperature',
  sessionId: 'sessionId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  username: 'username',
  usersecret: 'usersecret',
  authority: 'authority'
};

exports.Prisma.patientOrderByRelevanceFieldEnum = {
  patientName: 'patientName',
  residentialId: 'residentialId',
  age: 'age',
  birthDate: 'birthDate',
  phoneNumber: 'phoneNumber',
  address: 'address',
  bloodType: 'bloodType',
  hight: 'hight',
  weight: 'weight',
  social: 'social',
  gender: 'gender',
  sicknessCause: 'sicknessCause',
  firstEverTreatment: 'firstEverTreatment',
  firstTreatmentHere: 'firstTreatmentHere',
  note: 'note',
  filterNo: 'filterNo',
  schedule: 'schedule'
};

exports.Prisma.fileOrderByRelevanceFieldEnum = {
  originalName: 'originalName',
  storedName: 'storedName',
  mimeType: 'mimeType',
  path: 'path'
};

exports.Prisma.sessionOrderByRelevanceFieldEnum = {
  date: 'date',
  day: 'day',
  techName: 'techName',
  deviceNo: 'deviceNo',
  sessionType: 'sessionType',
  sessionDuration: 'sessionDuration',
  startingTime: 'startingTime',
  anticoagulantUsed: 'anticoagulantUsed',
  ktv: 'ktv',
  urr: 'urr',
  ultrafiltrationRate: 'ultrafiltrationRate',
  wtPreHD: 'wtPreHD',
  wtPostHD: 'wtPostHD',
  HDStarting: 'HDStarting',
  heparinRate: 'heparinRate',
  heparinBolus: 'heparinBolus',
  UFGoal: 'UFGoal',
  intake: 'intake',
  output: 'output'
};

exports.Prisma.sessionHoursOrderByRelevanceFieldEnum = {
  time: 'time',
  bloodPressure: 'bloodPressure',
  rbs: 'rbs',
  ivf: 'ivf',
  drugs: 'drugs',
  cramps: 'cramps',
  vomitting: 'vomitting',
  hematoma: 'hematoma',
  chestPain: 'chestPain',
  pulseRate: 'pulseRate',
  temperature: 'temperature'
};


exports.Prisma.ModelName = {
  user: 'user',
  patient: 'patient',
  file: 'file',
  session: 'session',
  sessionHours: 'sessionHours'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
